#+options: ^:nil toc:nil

* org
#+begin_src elisp
(org-export-define-derived-backend 'stasis-md 'md
  :translate-alist
  '((template . stasis-md-template)))

(defun stasis-md-template (contents info)
  (concat
   (format "Title: %s\n" (car (plist-get info :title)))
   (format "Date: %s\n" (car (plist-get info :date)))
   "\n\n"
   contents))

(defun my/stasis-export ()
  "Export each top-level heading of the current Org file to its own file."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "^\\* " nil t) ;; Match top-level headings
      (org-narrow-to-subtree)
      (let* ((file (org-export-output-file-name ".md" 'subtree))
             (dir (and file (file-name-directory file))))
        (when file
          (message "Exporting %s..." file)
          (when (and dir (not (file-directory-p dir)))
            (make-directory dir 'parents))
          (org-export-to-file 'stasis-md file nil 'subtree)))
      (widen))))
#+end_src

#+RESULTS:
: my/stasis-export

* Top page
:properties:
:export_title: Conao3 Notes
:export_file_name: generated/contents/index.md
:export_date: 2024-12-21
:end:

** Links
- GitHub :: https://github.com/conao3
- X(Twitter) :: https://x.com/conao_3
- 技術書典 :: https://techbookfest.org/organization/b48gui73eygdZDs02kqB1C

* Hello Stasis
:properties:
:export_title: Hello Stasis
:export_file_name: generated/contents/blog/2024/5a7fcc.md
:export_date: 2024-12-21
:end:

私は conao3.com を持っていて、どうせ何回ブログを作っても飽きるので初めからサブドメインで用意するようにしています。
今までのブログはこんな感じ。

- https://conao3.com :: 2020/05~ hugo製
- https://a.conao3.com :: 2023/03~ astro製
- https://s.conao3.com :: 2024/12~ stasis製

このブログは[[https://github.com/magnars/stasis][stasis]]から生成されています。
stasisはClojureの静的ブログ生成ライブラリで、主張がほとんどない薄いフレームワークです。

descriptionには「Some Clojure functions for creating static websites.」とあります。
その説明通り、提供されているのは単なる関数なので、それを自分で組み合わせてオレオレフレームワークを作ろうぜという世界観です。

ソースは[[https://github.com/conao3/blog-stasis-src][conao3/blog-stasis-src]]においてあります。
ひとまずこんなところで。

* ClojureでEcho Server
:properties:
:export_title: ClojureでEcho Server
:export_file_name: generated/contents/blog/2024/4d880f.md
:export_date: 2024-12-23
:end:

ClojureでTCPソケットを使ったプログラムを書きたくなりました。
TCPソケットを使おうと思ったら書くのがEcho Serverですね。書きましょう。

ライブラリなしで書くときはとりあえずcoreのドキュメントを参照します。
https://clojure.github.io/clojure/index.html

しかし、ソケット通信のためのAPIは用意されてないので、javaのドキュメントを参照します。
Clojureが利用しているJDKのバージョンは以下で調べることができます

#+begin_src clojure
(System/getProperty "java.version")
;;=> "21.0.5
#+end_src

JDK21のドキュメントはこちらです。
- https://docs.oracle.com/javase/jp/21/index.html
- https://docs.oracle.com/javase/jp/21/docs/api/index.html

=java.net= を使うことで実装できそうです。

** 調査
まずサーバー側のソケットを作り、 =accept= で待ち受けます。
=accept= は通信要求が来るまでブロッキングされます。

#+begin_src clojure
(def server-socket (java.net.ServerSocket. 15390))
;;=> #'user/server-socket

(def client-socket (. server-socket accept))
;;=> #'user/client-socket
#+end_src

なお、クライアントは =telnet= で試すことができます。
=telnet= は =C-]= を押すと通信を止めることができます。

#+begin_src sh
$ telnet localhost 15390
Trying ::1...
Connected to localhost.
Escape character is '^]'.
#+end_src

サーバー側に戻ります。
=client-socket= を得ることができたら、 =io/reader= と =io/writer= により、ioを得ることができます。
#+begin_src clojure
(def input-stream (io/reader client-socket))
;;=> #'user/input-stream

(def output-stream (io/writer client-socket))
;;=> #'user/output-stream
#+end_src

=io/reader= の返り値のため、 =readLine= などを利用することができます。
#+begin_src clojure
(. input-stream readLine)
;;=> "asdf"
#+end_src

=readLine= は ="\n"= が入力されるまでブロッキングします。

** 実装
調査を受けて、実装はこちらです。

#+begin_src clojure
(ns echo-server.core
  (:require
   [clojure.java.io :as io])
  (:import
   [java.net ServerSocket]
   [java.io BufferedReader BufferedWriter])
  (:gen-class))

(defn handle-client [client-socket]
  (let [input-stream ^BufferedReader (io/reader client-socket)
        output-stream ^BufferedWriter (io/writer client-socket)]
    (loop []
      (let [inpt (. input-stream readLine)]
        (println "Received: " inpt)
        (when (and inpt (not= "" inpt))
          (. output-stream write (str inpt "\n"))
          (. output-stream flush))
        (when-not (nil? inpt)         ; nil indicates EOF
          (recur))))))

(defn start-server []
  (println "Listening localhost:15390")
  (let [server-socket (ServerSocket. 15390)]
    (loop []
      (let [client-socket (. server-socket accept)]
        (println "Connection Accepted")
        (handle-client client-socket))
      (recur))))
#+end_src

もうちょっとClojureらしく書かせて欲しいという感情はありますが、とりあえずこれでできました。

* Nix with Commonlisp
:properties:
:export_title: Nix with Commonlisp
:export_file_name: generated/contents/blog/2024/fa34f6
:export_date: 2024-12-27
:end:

NixでCommonlispプロジェクトを管理する。
taniさんがテンプレを用意してくれているので、それを使わせてもらう。

#+begin_src elisp
(setq inferior-lisp-program "nix develop --command sbcl")
#+end_src

#+begin_src common-lisp
(:source-registry
 (:tree (:home "dev/repos/cl-paip"))
 :inherit-configuration)
#+end_src

load
#+begin_src common-lisp
(asdf:load-system :paip)
#+end_src

test
#+begin_src common-lisp
(asdf:test-system :paip)
#+end_src
